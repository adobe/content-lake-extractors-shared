/*
 * Copyright 2023 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

import {
  StatusCodes,
  StatusTexts,
} from './constants.js';

const INTERNAL_SERVER_CODE = 500;
const INTERNAL_SERVER = 'Internal Server Error';

/**
 * Error class for the extractor. Defines a uniform structure for all errors
 * generated by the extractor.
 */
export class ExtractError extends Error {
  /**
   * Creates a "Bad Request" error that will use the given message.
   * @param {string} message Human readable message to include with the error.
   * @returns {ExtractError} A new error instance.
   */
  static badRequest(message) {
    return new ExtractError(message, StatusCodes.BAD_REQUEST, StatusTexts.BAD_REQUEST);
  }

  /**
   * Creates an "Internal Server Error" that will use the given message.
   * @param {string} message Human readable message to include with the error.
   * @returns {ExtractError} A new error instance.
   */
  static internalServerError(message) {
    return new ExtractError(
      message,
      StatusCodes.INTERNAL_SERVER_ERROR,
      StatusTexts.INTERNAL_SERVER_ERROR,
    );
  }

  /**
   * Creates a new error from a raw HTTP response from fetch.
   * @param {string} message Human readable message to include with the error.
   * @param {*} response Fetch response.
   * @returns {ExtractError} A new error instance.
   */
  static fromResponse(message, response) {
    const {
      status = StatusCodes.INTERNAL_SERVER_ERROR,
      statusText = StatusTexts.INTERNAL_SERVER_ERROR,
    } = response;
    return new ExtractError(`${status} ${statusText}: ${message}`, status, statusText);
  }

  #status;

  #title;

  /**
   * Constructs a new error that will use the given information.
   *
   * @param {string} message Human readable message to include with the message.
   * @param {number} status HTTP status code to include with the error.
   * @param {string} title HTTP status title to include with the error.
   */
  constructor(message, status, title) {
    super(message);
    this.#status = status;
    this.#title = title;
  }

  /**
   * The HTTP status code associated with the error.
   */
  get status() {
    return this.#status || INTERNAL_SERVER_CODE;
  }

  /**
   * The HTTP title associated with the error.
   */
  get title() {
    return this.#title || INTERNAL_SERVER;
  }
}
